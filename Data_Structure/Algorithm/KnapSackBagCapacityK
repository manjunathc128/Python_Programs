cache: list[int] = []
wt:list[int] = [1,4,3]
val: list[int] = [150, 300, 200]

// Recurssion approach t(c) O(2 ^ n)

def knapsack(i, c):  #  wt, val 
    if i == 0 or c <= 0 :
        return 0
    if wt[i-1] > c:
        return knapsack(i-1, c)
    
    ith_item_selected = val[i-1] + knapsack(i-1, c - wt[i-1])   #  wt, val 
    
    ith_item_notselected = knapsack(i-1,c)  #  wt, val 

    return max( ith_item_selected,  ith_item_notselected)  
    
print(knapsack(len(val), 4))

// Dp approach memoization  t(c) O(nC)

def knapsack(i, c):  #  wt, val 
    if i == 0 or c <= 0 :
        return 0
    if wt[i-1] > c:
        return knapsack(i-1, c)
    
    ith_item_selected = val[i-1] + knapsack(i-1, c - wt[i-1])   #  wt, val 
    
    ith_item_notselected = knapsack(i-1,c)  #  wt, val 

    return max( ith_item_selected,  ith_item_notselected)  
    
print(knapsack(len(val), 4))









